{"version":3,"sources":["Mousetrap.js"],"names":["define","skylark","_REVERSE_MAP","_MAP","8","9","13","16","17","18","20","27","32","33","34","35","36","37","38","39","40","45","46","91","93","224","_KEYCODE_MAP","106","107","109","110","111","186","187","188","189","190","191","192","219","220","221","222","_SHIFT_MAP","~","!","@","#","$","%","^","&","*","(",")","_","+",":","\"","<",">","?","|","_SPECIAL_ALIASES","option","command","return","escape","plus","mod","test","navigator","platform","i","toString","_addEvent","object","type","callback","addEventListener","attachEvent","_characterFromEvent","e","character","String","fromCharCode","which","shiftKey","toLowerCase","_isModifier","key","_pickBestAction","modifiers","action","hasOwnProperty","_getReverseMap","length","_getKeyInfo","combination","keys","replace","split","_keysFromString","push","Mousetrap","targetElement","self","this","document","target","_callbacks","_directMap","_resetTimer","_sequenceLevels","_ignoreNextKeyup","_ignoreNextKeypress","_nextExpectedAction","_resetSequences","doNotReset","activeSequences","_getMatches","sequenceName","level","modifiers1","modifiers2","matches","seq","metaKey","ctrlKey","sort","join","deleteCombo","combo","deleteSequence","splice","_fireCallback","sequence","stopCallback","srcElement","preventDefault","returnValue","_preventDefault","stopPropagation","cancelBubble","_stopPropagation","_handleKeyEvent","keyCode","handleKey","altKey","_eventModifiers","_bindSequence","_increaseSequence","nextAction","clearTimeout","setTimeout","_callbackAndReset","wrappedCallback","_bindSingle","info","_handleKey","callbacks","maxLevel","processedSequenceCallback","Math","max","ignoreThisKeypress","_bindMultiple","combinations","prototype","bind","Array","call","unbind","trigger","reset","element","className","indexOf","_belongsTo","ancestor","parentNode","composedPath","initialEventTarget","tagName","isContentEditable","apply","arguments","addKeycodes","init","documentMousetrap","method","charAt","attach"],"mappings":"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","file":"../Mousetrap.js","sourcesContent":["define([\r\n    \"skylark-langx/skylark\"\r\n],function(skylark){\r\n\r\n    /**\r\n     * mapping of special keycodes to their corresponding keys\r\n     *\r\n     * everything in this dictionary cannot use keypress events\r\n     * so it has to be here to map to the correct keycodes for\r\n     * keyup/keydown events\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var _MAP = {\r\n        8: 'backspace',\r\n        9: 'tab',\r\n        13: 'enter',\r\n        16: 'shift',\r\n        17: 'ctrl',\r\n        18: 'alt',\r\n        20: 'capslock',\r\n        27: 'esc',\r\n        32: 'space',\r\n        33: 'pageup',\r\n        34: 'pagedown',\r\n        35: 'end',\r\n        36: 'home',\r\n        37: 'left',\r\n        38: 'up',\r\n        39: 'right',\r\n        40: 'down',\r\n        45: 'ins',\r\n        46: 'del',\r\n        91: 'meta',\r\n        93: 'meta',\r\n        224: 'meta'\r\n    };\r\n\r\n    /**\r\n     * mapping for special characters so they can support\r\n     *\r\n     * this dictionary is only used incase you want to bind a\r\n     * keyup or keydown event to one of these keys\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var _KEYCODE_MAP = {\r\n        106: '*',\r\n        107: '+',\r\n        109: '-',\r\n        110: '.',\r\n        111 : '/',\r\n        186: ';',\r\n        187: '=',\r\n        188: ',',\r\n        189: '-',\r\n        190: '.',\r\n        191: '/',\r\n        192: '`',\r\n        219: '[',\r\n        220: '\\\\',\r\n        221: ']',\r\n        222: '\\''\r\n    };\r\n\r\n    /**\r\n     * this is a mapping of keys that require shift on a US keypad\r\n     * back to the non shift equivelents\r\n     *\r\n     * this is so you can use keyup events with these keys\r\n     *\r\n     * note that this will only work reliably on US keyboards\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var _SHIFT_MAP = {\r\n        '~': '`',\r\n        '!': '1',\r\n        '@': '2',\r\n        '#': '3',\r\n        '$': '4',\r\n        '%': '5',\r\n        '^': '6',\r\n        '&': '7',\r\n        '*': '8',\r\n        '(': '9',\r\n        ')': '0',\r\n        '_': '-',\r\n        '+': '=',\r\n        ':': ';',\r\n        '\\\"': '\\'',\r\n        '<': ',',\r\n        '>': '.',\r\n        '?': '/',\r\n        '|': '\\\\'\r\n    };\r\n\r\n    /**\r\n     * this is a list of special strings you can use to map\r\n     * to modifier keys when you specify your keyboard shortcuts\r\n     *\r\n     * @type {Object}\r\n     */\r\n    var _SPECIAL_ALIASES = {\r\n        'option': 'alt',\r\n        'command': 'meta',\r\n        'return': 'enter',\r\n        'escape': 'esc',\r\n        'plus': '+',\r\n        'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'\r\n    };\r\n\r\n    /**\r\n     * variable to store the flipped version of _MAP from above\r\n     * needed to check if we should use keypress or not when no action\r\n     * is specified\r\n     *\r\n     * @type {Object|undefined}\r\n     */\r\n    var _REVERSE_MAP;\r\n\r\n    /**\r\n     * loop through the f keys, f1 to f19 and add them to the map\r\n     * programatically\r\n     */\r\n    for (var i = 1; i < 20; ++i) {\r\n        _MAP[111 + i] = 'f' + i;\r\n    }\r\n\r\n    /**\r\n     * loop through to map numbers on the numeric keypad\r\n     */\r\n    for (i = 0; i <= 9; ++i) {\r\n\r\n        // This needs to use a string cause otherwise since 0 is falsey\r\n        // mousetrap will never fire for numpad 0 pressed as part of a keydown\r\n        // event.\r\n        //\r\n        // @see https://github.com/ccampbell/mousetrap/pull/258\r\n        _MAP[i + 96] = i.toString();\r\n    }\r\n\r\n    /**\r\n     * cross browser add event method\r\n     *\r\n     * @param {Element|HTMLDocument} object\r\n     * @param {string} type\r\n     * @param {Function} callback\r\n     * @returns void\r\n     */\r\n    function _addEvent(object, type, callback) {\r\n        if (object.addEventListener) {\r\n            object.addEventListener(type, callback, false);\r\n            return;\r\n        }\r\n\r\n        object.attachEvent('on' + type, callback);\r\n    }\r\n\r\n    /**\r\n     * takes the event and returns the key character\r\n     *\r\n     * @param {Event} e\r\n     * @return {string}\r\n     */\r\n    function _characterFromEvent(e) {\r\n\r\n        // for keypress events we should return the character as is\r\n        if (e.type == 'keypress') {\r\n            var character = String.fromCharCode(e.which);\r\n\r\n            // if the shift key is not pressed then it is safe to assume\r\n            // that we want the character to be lowercase.  this means if\r\n            // you accidentally have caps lock on then your key bindings\r\n            // will continue to work\r\n            //\r\n            // the only side effect that might not be desired is if you\r\n            // bind something like 'A' cause you want to trigger an\r\n            // event when capital A is pressed caps lock will no longer\r\n            // trigger the event.  shift+a will though.\r\n            if (!e.shiftKey) {\r\n                character = character.toLowerCase();\r\n            }\r\n\r\n            return character;\r\n        }\r\n\r\n        // for non keypress events the special maps are needed\r\n        if (_MAP[e.which]) {\r\n            return _MAP[e.which];\r\n        }\r\n\r\n        if (_KEYCODE_MAP[e.which]) {\r\n            return _KEYCODE_MAP[e.which];\r\n        }\r\n\r\n        // if it is not in the special map\r\n\r\n        // with keydown and keyup events the character seems to always\r\n        // come in as an uppercase character whether you are pressing shift\r\n        // or not.  we should make sure it is always lowercase for comparisons\r\n        return String.fromCharCode(e.which).toLowerCase();\r\n    }\r\n\r\n    /**\r\n     * checks if two arrays are equal\r\n     *\r\n     * @param {Array} modifiers1\r\n     * @param {Array} modifiers2\r\n     * @returns {boolean}\r\n     */\r\n    function _modifiersMatch(modifiers1, modifiers2) {\r\n        return modifiers1.sort().join(',') === modifiers2.sort().join(',');\r\n    }\r\n\r\n    /**\r\n     * takes a key event and figures out what the modifiers are\r\n     *\r\n     * @param {Event} e\r\n     * @returns {Array}\r\n     */\r\n    function _eventModifiers(e) {\r\n        var modifiers = [];\r\n\r\n        if (e.shiftKey) {\r\n            modifiers.push('shift');\r\n        }\r\n\r\n        if (e.altKey) {\r\n            modifiers.push('alt');\r\n        }\r\n\r\n        if (e.ctrlKey) {\r\n            modifiers.push('ctrl');\r\n        }\r\n\r\n        if (e.metaKey) {\r\n            modifiers.push('meta');\r\n        }\r\n\r\n        return modifiers;\r\n    }\r\n\r\n    /**\r\n     * prevents default for this event\r\n     *\r\n     * @param {Event} e\r\n     * @returns void\r\n     */\r\n    function _preventDefault(e) {\r\n        if (e.preventDefault) {\r\n            e.preventDefault();\r\n            return;\r\n        }\r\n\r\n        e.returnValue = false;\r\n    }\r\n\r\n    /**\r\n     * stops propogation for this event\r\n     *\r\n     * @param {Event} e\r\n     * @returns void\r\n     */\r\n    function _stopPropagation(e) {\r\n        if (e.stopPropagation) {\r\n            e.stopPropagation();\r\n            return;\r\n        }\r\n\r\n        e.cancelBubble = true;\r\n    }\r\n\r\n    /**\r\n     * determines if the keycode specified is a modifier key or not\r\n     *\r\n     * @param {string} key\r\n     * @returns {boolean}\r\n     */\r\n    function _isModifier(key) {\r\n        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';\r\n    }\r\n\r\n    /**\r\n     * reverses the map lookup so that we can look for specific keys\r\n     * to see what can and can't use keypress\r\n     *\r\n     * @return {Object}\r\n     */\r\n    function _getReverseMap() {\r\n        if (!_REVERSE_MAP) {\r\n            _REVERSE_MAP = {};\r\n            for (var key in _MAP) {\r\n\r\n                // pull out the numeric keypad from here cause keypress should\r\n                // be able to detect the keys from the character\r\n                if (key > 95 && key < 112) {\r\n                    continue;\r\n                }\r\n\r\n                if (_MAP.hasOwnProperty(key)) {\r\n                    _REVERSE_MAP[_MAP[key]] = key;\r\n                }\r\n            }\r\n        }\r\n        return _REVERSE_MAP;\r\n    }\r\n\r\n    /**\r\n     * picks the best action based on the key combination\r\n     *\r\n     * @param {string} key - character for key\r\n     * @param {Array} modifiers\r\n     * @param {string=} action passed in\r\n     */\r\n    function _pickBestAction(key, modifiers, action) {\r\n\r\n        // if no action was picked in we should try to pick the one\r\n        // that we think would work best for this key\r\n        if (!action) {\r\n            action = _getReverseMap()[key] ? 'keydown' : 'keypress';\r\n        }\r\n\r\n        // modifier keys don't work as expected with keypress,\r\n        // switch to keydown\r\n        if (action == 'keypress' && modifiers.length) {\r\n            action = 'keydown';\r\n        }\r\n\r\n        return action;\r\n    }\r\n\r\n    /**\r\n     * Converts from a string key combination to an array\r\n     *\r\n     * @param  {string} combination like \"command+shift+l\"\r\n     * @return {Array}\r\n     */\r\n    function _keysFromString(combination) {\r\n        if (combination === '+') {\r\n            return ['+'];\r\n        }\r\n\r\n        combination = combination.replace(/\\+{2}/g, '+plus');\r\n        return combination.split('+');\r\n    }\r\n\r\n    /**\r\n     * Gets info for a specific key combination\r\n     *\r\n     * @param  {string} combination key combination (\"command+s\" or \"a\" or \"*\")\r\n     * @param  {string=} action\r\n     * @returns {Object}\r\n     */\r\n    function _getKeyInfo(combination, action) {\r\n        var keys;\r\n        var key;\r\n        var i;\r\n        var modifiers = [];\r\n\r\n        // take the keys from this pattern and figure out what the actual\r\n        // pattern is all about\r\n        keys = _keysFromString(combination);\r\n\r\n        for (i = 0; i < keys.length; ++i) {\r\n            key = keys[i];\r\n\r\n            // normalize key names\r\n            if (_SPECIAL_ALIASES[key]) {\r\n                key = _SPECIAL_ALIASES[key];\r\n            }\r\n\r\n            // if this is not a keypress event then we should\r\n            // be smart about using shift keys\r\n            // this will only work for US keyboards however\r\n            if (action && action != 'keypress' && _SHIFT_MAP[key]) {\r\n                key = _SHIFT_MAP[key];\r\n                modifiers.push('shift');\r\n            }\r\n\r\n            // if this key is a modifier then add it to the list of modifiers\r\n            if (_isModifier(key)) {\r\n                modifiers.push(key);\r\n            }\r\n        }\r\n\r\n        // depending on what the key combination is\r\n        // we will try to pick the best event for it\r\n        action = _pickBestAction(key, modifiers, action);\r\n\r\n        return {\r\n            key: key,\r\n            modifiers: modifiers,\r\n            action: action\r\n        };\r\n    }\r\n\r\n    function _belongsTo(element, ancestor) {\r\n        if (element === null || element === document) {\r\n            return false;\r\n        }\r\n\r\n        if (element === ancestor) {\r\n            return true;\r\n        }\r\n\r\n        return _belongsTo(element.parentNode, ancestor);\r\n    }\r\n\r\n    function Mousetrap(targetElement) {\r\n        var self = this;\r\n\r\n        targetElement = targetElement || document;\r\n\r\n        if (!(self instanceof Mousetrap)) {\r\n            return new Mousetrap(targetElement);\r\n        }\r\n\r\n        /**\r\n         * element to attach key events to\r\n         *\r\n         * @type {Element}\r\n         */\r\n        self.target = targetElement;\r\n\r\n        /**\r\n         * a list of all the callbacks setup via Mousetrap.bind()\r\n         *\r\n         * @type {Object}\r\n         */\r\n        self._callbacks = {};\r\n\r\n        /**\r\n         * direct map of string combinations to callbacks used for trigger()\r\n         *\r\n         * @type {Object}\r\n         */\r\n        self._directMap = {};\r\n\r\n        /**\r\n         * keeps track of what level each sequence is at since multiple\r\n         * sequences can start out with the same sequence\r\n         *\r\n         * @type {Object}\r\n         */\r\n        var _sequenceLevels = {};\r\n\r\n        /**\r\n         * variable to store the setTimeout call\r\n         *\r\n         * @type {null|number}\r\n         */\r\n        var _resetTimer;\r\n\r\n        /**\r\n         * temporary state where we will ignore the next keyup\r\n         *\r\n         * @type {boolean|string}\r\n         */\r\n        var _ignoreNextKeyup = false;\r\n\r\n        /**\r\n         * temporary state where we will ignore the next keypress\r\n         *\r\n         * @type {boolean}\r\n         */\r\n        var _ignoreNextKeypress = false;\r\n\r\n        /**\r\n         * are we currently inside of a sequence?\r\n         * type of action (\"keyup\" or \"keydown\" or \"keypress\") or false\r\n         *\r\n         * @type {boolean|string}\r\n         */\r\n        var _nextExpectedAction = false;\r\n\r\n        /**\r\n         * resets all sequence counters except for the ones passed in\r\n         *\r\n         * @param {Object} doNotReset\r\n         * @returns void\r\n         */\r\n        function _resetSequences(doNotReset) {\r\n            doNotReset = doNotReset || {};\r\n\r\n            var activeSequences = false,\r\n                key;\r\n\r\n            for (key in _sequenceLevels) {\r\n                if (doNotReset[key]) {\r\n                    activeSequences = true;\r\n                    continue;\r\n                }\r\n                _sequenceLevels[key] = 0;\r\n            }\r\n\r\n            if (!activeSequences) {\r\n                _nextExpectedAction = false;\r\n            }\r\n        }\r\n\r\n        /**\r\n         * finds all callbacks that match based on the keycode, modifiers,\r\n         * and action\r\n         *\r\n         * @param {string} character\r\n         * @param {Array} modifiers\r\n         * @param {Event|Object} e\r\n         * @param {string=} sequenceName - name of the sequence we are looking for\r\n         * @param {string=} combination\r\n         * @param {number=} level\r\n         * @returns {Array}\r\n         */\r\n        function _getMatches(character, modifiers, e, sequenceName, combination, level) {\r\n            var i;\r\n            var callback;\r\n            var matches = [];\r\n            var action = e.type;\r\n\r\n            // if there are no events related to this keycode\r\n            if (!self._callbacks[character]) {\r\n                return [];\r\n            }\r\n\r\n            // if a modifier key is coming up on its own we should allow it\r\n            if (action == 'keyup' && _isModifier(character)) {\r\n                modifiers = [character];\r\n            }\r\n\r\n            // loop through all callbacks for the key that was pressed\r\n            // and see if any of them match\r\n            for (i = 0; i < self._callbacks[character].length; ++i) {\r\n                callback = self._callbacks[character][i];\r\n\r\n                // if a sequence name is not specified, but this is a sequence at\r\n                // the wrong level then move onto the next match\r\n                if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {\r\n                    continue;\r\n                }\r\n\r\n                // if the action we are looking for doesn't match the action we got\r\n                // then we should keep going\r\n                if (action != callback.action) {\r\n                    continue;\r\n                }\r\n\r\n                // if this is a keypress event and the meta key and control key\r\n                // are not pressed that means that we need to only look at the\r\n                // character, otherwise check the modifiers as well\r\n                //\r\n                // chrome will not fire a keypress if meta or control is down\r\n                // safari will fire a keypress if meta or meta+shift is down\r\n                // firefox will fire a keypress if meta or control is down\r\n                if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {\r\n\r\n                    // when you bind a combination or sequence a second time it\r\n                    // should overwrite the first one.  if a sequenceName or\r\n                    // combination is specified in this call it does just that\r\n                    //\r\n                    // @todo make deleting its own method?\r\n                    var deleteCombo = !sequenceName && callback.combo == combination;\r\n                    var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;\r\n                    if (deleteCombo || deleteSequence) {\r\n                        self._callbacks[character].splice(i, 1);\r\n                    }\r\n\r\n                    matches.push(callback);\r\n                }\r\n            }\r\n\r\n            return matches;\r\n        }\r\n\r\n        /**\r\n         * actually calls the callback function\r\n         *\r\n         * if your callback function returns false this will use the jquery\r\n         * convention - prevent default and stop propogation on the event\r\n         *\r\n         * @param {Function} callback\r\n         * @param {Event} e\r\n         * @returns void\r\n         */\r\n        function _fireCallback(callback, e, combo, sequence) {\r\n\r\n            // if this event should not happen stop here\r\n            if (self.stopCallback(e, e.target || e.srcElement, combo, sequence)) {\r\n                return;\r\n            }\r\n\r\n            if (callback(e, combo) === false) {\r\n                _preventDefault(e);\r\n                _stopPropagation(e);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * handles a character key event\r\n         *\r\n         * @param {string} character\r\n         * @param {Array} modifiers\r\n         * @param {Event} e\r\n         * @returns void\r\n         */\r\n        self._handleKey = function(character, modifiers, e) {\r\n            var callbacks = _getMatches(character, modifiers, e);\r\n            var i;\r\n            var doNotReset = {};\r\n            var maxLevel = 0;\r\n            var processedSequenceCallback = false;\r\n\r\n            // Calculate the maxLevel for sequences so we can only execute the longest callback sequence\r\n            for (i = 0; i < callbacks.length; ++i) {\r\n                if (callbacks[i].seq) {\r\n                    maxLevel = Math.max(maxLevel, callbacks[i].level);\r\n                }\r\n            }\r\n\r\n            // loop through matching callbacks for this key event\r\n            for (i = 0; i < callbacks.length; ++i) {\r\n\r\n                // fire for all sequence callbacks\r\n                // this is because if for example you have multiple sequences\r\n                // bound such as \"g i\" and \"g t\" they both need to fire the\r\n                // callback for matching g cause otherwise you can only ever\r\n                // match the first one\r\n                if (callbacks[i].seq) {\r\n\r\n                    // only fire callbacks for the maxLevel to prevent\r\n                    // subsequences from also firing\r\n                    //\r\n                    // for example 'a option b' should not cause 'option b' to fire\r\n                    // even though 'option b' is part of the other sequence\r\n                    //\r\n                    // any sequences that do not match here will be discarded\r\n                    // below by the _resetSequences call\r\n                    if (callbacks[i].level != maxLevel) {\r\n                        continue;\r\n                    }\r\n\r\n                    processedSequenceCallback = true;\r\n\r\n                    // keep a list of which sequences were matches for later\r\n                    doNotReset[callbacks[i].seq] = 1;\r\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);\r\n                    continue;\r\n                }\r\n\r\n                // if there were no sequence matches but we are still here\r\n                // that means this is a regular match so we should fire that\r\n                if (!processedSequenceCallback) {\r\n                    _fireCallback(callbacks[i].callback, e, callbacks[i].combo);\r\n                }\r\n            }\r\n\r\n            // if the key you pressed matches the type of sequence without\r\n            // being a modifier (ie \"keyup\" or \"keypress\") then we should\r\n            // reset all sequences that were not matched by this event\r\n            //\r\n            // this is so, for example, if you have the sequence \"h a t\" and you\r\n            // type \"h e a r t\" it does not match.  in this case the \"e\" will\r\n            // cause the sequence to reset\r\n            //\r\n            // modifier keys are ignored because you can have a sequence\r\n            // that contains modifiers such as \"enter ctrl+space\" and in most\r\n            // cases the modifier key will be pressed before the next key\r\n            //\r\n            // also if you have a sequence such as \"ctrl+b a\" then pressing the\r\n            // \"b\" key will trigger a \"keypress\" and a \"keydown\"\r\n            //\r\n            // the \"keydown\" is expected when there is a modifier, but the\r\n            // \"keypress\" ends up matching the _nextExpectedAction since it occurs\r\n            // after and that causes the sequence to reset\r\n            //\r\n            // we ignore keypresses in a sequence that directly follow a keydown\r\n            // for the same character\r\n            var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;\r\n            if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {\r\n                _resetSequences(doNotReset);\r\n            }\r\n\r\n            _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';\r\n        };\r\n\r\n        /**\r\n         * handles a keydown event\r\n         *\r\n         * @param {Event} e\r\n         * @returns void\r\n         */\r\n        function _handleKeyEvent(e) {\r\n\r\n            // normalize e.which for key events\r\n            // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion\r\n            if (typeof e.which !== 'number') {\r\n                e.which = e.keyCode;\r\n            }\r\n\r\n            var character = _characterFromEvent(e);\r\n\r\n            // no character found then stop\r\n            if (!character) {\r\n                return;\r\n            }\r\n\r\n            // need to use === for the character check because the character can be 0\r\n            if (e.type == 'keyup' && _ignoreNextKeyup === character) {\r\n                _ignoreNextKeyup = false;\r\n                return;\r\n            }\r\n\r\n            self.handleKey(character, _eventModifiers(e), e);\r\n        }\r\n\r\n        /**\r\n         * called to set a 1 second timeout on the specified sequence\r\n         *\r\n         * this is so after each key press in the sequence you have 1 second\r\n         * to press the next key before you have to start over\r\n         *\r\n         * @returns void\r\n         */\r\n        function _resetSequenceTimer() {\r\n            clearTimeout(_resetTimer);\r\n            _resetTimer = setTimeout(_resetSequences, 1000);\r\n        }\r\n\r\n        /**\r\n         * binds a key sequence to an event\r\n         *\r\n         * @param {string} combo - combo specified in bind call\r\n         * @param {Array} keys\r\n         * @param {Function} callback\r\n         * @param {string=} action\r\n         * @returns void\r\n         */\r\n        function _bindSequence(combo, keys, callback, action) {\r\n\r\n            // start off by adding a sequence level record for this combination\r\n            // and setting the level to 0\r\n            _sequenceLevels[combo] = 0;\r\n\r\n            /**\r\n             * callback to increase the sequence level for this sequence and reset\r\n             * all other sequences that were active\r\n             *\r\n             * @param {string} nextAction\r\n             * @returns {Function}\r\n             */\r\n            function _increaseSequence(nextAction) {\r\n                return function() {\r\n                    _nextExpectedAction = nextAction;\r\n                    ++_sequenceLevels[combo];\r\n                    _resetSequenceTimer();\r\n                };\r\n            }\r\n\r\n            /**\r\n             * wraps the specified callback inside of another function in order\r\n             * to reset all sequence counters as soon as this sequence is done\r\n             *\r\n             * @param {Event} e\r\n             * @returns void\r\n             */\r\n            function _callbackAndReset(e) {\r\n                _fireCallback(callback, e, combo);\r\n\r\n                // we should ignore the next key up if the action is key down\r\n                // or keypress.  this is so if you finish a sequence and\r\n                // release the key the final key will not trigger a keyup\r\n                if (action !== 'keyup') {\r\n                    _ignoreNextKeyup = _characterFromEvent(e);\r\n                }\r\n\r\n                // weird race condition if a sequence ends with the key\r\n                // another sequence begins with\r\n                setTimeout(_resetSequences, 10);\r\n            }\r\n\r\n            // loop through keys one at a time and bind the appropriate callback\r\n            // function.  for any key leading up to the final one it should\r\n            // increase the sequence. after the final, it should reset all sequences\r\n            //\r\n            // if an action is specified in the original bind call then that will\r\n            // be used throughout.  otherwise we will pass the action that the\r\n            // next key in the sequence should match.  this allows a sequence\r\n            // to mix and match keypress and keydown events depending on which\r\n            // ones are better suited to the key provided\r\n            for (var i = 0; i < keys.length; ++i) {\r\n                var isFinal = i + 1 === keys.length;\r\n                var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);\r\n                _bindSingle(keys[i], wrappedCallback, action, combo, i);\r\n            }\r\n        }\r\n\r\n        /**\r\n         * binds a single keyboard combination\r\n         *\r\n         * @param {string} combination\r\n         * @param {Function} callback\r\n         * @param {string=} action\r\n         * @param {string=} sequenceName - name of sequence if part of sequence\r\n         * @param {number=} level - what part of the sequence the command is\r\n         * @returns void\r\n         */\r\n        function _bindSingle(combination, callback, action, sequenceName, level) {\r\n\r\n            // store a direct mapped reference for use with Mousetrap.trigger\r\n            self._directMap[combination + ':' + action] = callback;\r\n\r\n            // make sure multiple spaces in a row become a single space\r\n            combination = combination.replace(/\\s+/g, ' ');\r\n\r\n            var sequence = combination.split(' ');\r\n            var info;\r\n\r\n            // if this pattern is a sequence of keys then run through this method\r\n            // to reprocess each pattern one key at a time\r\n            if (sequence.length > 1) {\r\n                _bindSequence(combination, sequence, callback, action);\r\n                return;\r\n            }\r\n\r\n            info = _getKeyInfo(combination, action);\r\n\r\n            // make sure to initialize array if this is the first time\r\n            // a callback is added for this key\r\n            self._callbacks[info.key] = self._callbacks[info.key] || [];\r\n\r\n            // remove an existing match if there is one\r\n            _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);\r\n\r\n            // add this call back to the array\r\n            // if it is a sequence put it at the beginning\r\n            // if not put it at the end\r\n            //\r\n            // this is important because the way these are processed expects\r\n            // the sequence ones to come first\r\n            self._callbacks[info.key][sequenceName ? 'unshift' : 'push']({\r\n                callback: callback,\r\n                modifiers: info.modifiers,\r\n                action: info.action,\r\n                seq: sequenceName,\r\n                level: level,\r\n                combo: combination\r\n            });\r\n        }\r\n\r\n        /**\r\n         * binds multiple combinations to the same callback\r\n         *\r\n         * @param {Array} combinations\r\n         * @param {Function} callback\r\n         * @param {string|undefined} action\r\n         * @returns void\r\n         */\r\n        self._bindMultiple = function(combinations, callback, action) {\r\n            for (var i = 0; i < combinations.length; ++i) {\r\n                _bindSingle(combinations[i], callback, action);\r\n            }\r\n        };\r\n\r\n        // start!\r\n        _addEvent(targetElement, 'keypress', _handleKeyEvent);\r\n        _addEvent(targetElement, 'keydown', _handleKeyEvent);\r\n        _addEvent(targetElement, 'keyup', _handleKeyEvent);\r\n    }\r\n\r\n    /**\r\n     * binds an event to mousetrap\r\n     *\r\n     * can be a single key, a combination of keys separated with +,\r\n     * an array of keys, or a sequence of keys separated by spaces\r\n     *\r\n     * be sure to list the modifier keys first to make sure that the\r\n     * correct key ends up getting bound (the last key in the pattern)\r\n     *\r\n     * @param {string|Array} keys\r\n     * @param {Function} callback\r\n     * @param {string=} action - 'keypress', 'keydown', or 'keyup'\r\n     * @returns void\r\n     */\r\n    Mousetrap.prototype.bind = function(keys, callback, action) {\r\n        var self = this;\r\n        keys = keys instanceof Array ? keys : [keys];\r\n        self._bindMultiple.call(self, keys, callback, action);\r\n        return self;\r\n    };\r\n\r\n    /**\r\n     * unbinds an event to mousetrap\r\n     *\r\n     * the unbinding sets the callback function of the specified key combo\r\n     * to an empty function and deletes the corresponding key in the\r\n     * _directMap dict.\r\n     *\r\n     * TODO: actually remove this from the _callbacks dictionary instead\r\n     * of binding an empty function\r\n     *\r\n     * the keycombo+action has to be exactly the same as\r\n     * it was defined in the bind method\r\n     *\r\n     * @param {string|Array} keys\r\n     * @param {string} action\r\n     * @returns void\r\n     */\r\n    Mousetrap.prototype.unbind = function(keys, action) {\r\n        var self = this;\r\n        return self.bind.call(self, keys, function() {}, action);\r\n    };\r\n\r\n    /**\r\n     * triggers an event that has already been bound\r\n     *\r\n     * @param {string} keys\r\n     * @param {string=} action\r\n     * @returns void\r\n     */\r\n    Mousetrap.prototype.trigger = function(keys, action) {\r\n        var self = this;\r\n        if (self._directMap[keys + ':' + action]) {\r\n            self._directMap[keys + ':' + action]({}, keys);\r\n        }\r\n        return self;\r\n    };\r\n\r\n    /**\r\n     * resets the library back to its initial state.  this is useful\r\n     * if you want to clear out the current keyboard shortcuts and bind\r\n     * new ones - for example if you switch to another page\r\n     *\r\n     * @returns void\r\n     */\r\n    Mousetrap.prototype.reset = function() {\r\n        var self = this;\r\n        self._callbacks = {};\r\n        self._directMap = {};\r\n        return self;\r\n    };\r\n\r\n    /**\r\n     * should we stop this event before firing off callbacks\r\n     *\r\n     * @param {Event} e\r\n     * @param {Element} element\r\n     * @return {boolean}\r\n     */\r\n    Mousetrap.prototype.stopCallback = function(e, element) {\r\n        var self = this;\r\n\r\n        // if the element has the class \"mousetrap\" then no need to stop\r\n        if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {\r\n            return false;\r\n        }\r\n\r\n        if (_belongsTo(element, self.target)) {\r\n            return false;\r\n        }\r\n\r\n        // Events originating from a shadow DOM are re-targetted and `e.target` is the shadow host,\r\n        // not the initial event target in the shadow tree. Note that not all events cross the\r\n        // shadow boundary.\r\n        // For shadow trees with `mode: 'open'`, the initial event target is the first element in\r\n        // the event’s composed path. For shadow trees with `mode: 'closed'`, the initial event\r\n        // target cannot be obtained.\r\n        if ('composedPath' in e && typeof e.composedPath === 'function') {\r\n            // For open shadow trees, update `element` so that the following check works.\r\n            var initialEventTarget = e.composedPath()[0];\r\n            if (initialEventTarget !== e.target) {\r\n                element = initialEventTarget;\r\n            }\r\n        }\r\n\r\n        // stop for input, select, and textarea\r\n        return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;\r\n    };\r\n\r\n    /**\r\n     * exposes _handleKey publicly so it can be overwritten by extensions\r\n     */\r\n    Mousetrap.prototype.handleKey = function() {\r\n        var self = this;\r\n        return self._handleKey.apply(self, arguments);\r\n    };\r\n\r\n    /**\r\n     * allow custom key mappings\r\n     */\r\n    Mousetrap.addKeycodes = function(object) {\r\n        for (var key in object) {\r\n            if (object.hasOwnProperty(key)) {\r\n                _MAP[key] = object[key];\r\n            }\r\n        }\r\n        _REVERSE_MAP = null;\r\n    };\r\n\r\n    /**\r\n     * Init the global mousetrap functions\r\n     *\r\n     * This method is needed to allow the global mousetrap functions to work\r\n     * now that mousetrap is a constructor function.\r\n     */\r\n    Mousetrap.init = function() {\r\n        var documentMousetrap = Mousetrap(document);\r\n        for (var method in documentMousetrap) {\r\n            if (method.charAt(0) !== '_') {\r\n                Mousetrap[method] = (function(method) {\r\n                    return function() {\r\n                        return documentMousetrap[method].apply(documentMousetrap, arguments);\r\n                    };\r\n                } (method));\r\n            }\r\n        }\r\n    };\r\n\r\n    return skylark.attach(\"intg.Mousetrap\",Mousetrap);\r\n});"]}